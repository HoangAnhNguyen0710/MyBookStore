/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BookFilterDto
 */
export interface BookFilterDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof BookFilterDto
     */
    'author'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BookFilterDto
     */
    'title'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof BookFilterDto
     */
    'publisher_ids'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof BookFilterDto
     */
    'category_ids'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof BookFilterDto
     */
    'rating_from'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookFilterDto
     */
    'rating_to'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookFilterDto
     */
    'price_from'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookFilterDto
     */
    'price_to'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookFilterDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof BookFilterDto
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookFilterDto
     */
    'per_page'?: number;
}
/**
 * 
 * @export
 * @interface BookFilterResponseDto
 */
export interface BookFilterResponseDto {
    /**
     * 
     * @type {number}
     * @memberof BookFilterResponseDto
     */
    'total'?: number;
    /**
     * 
     * @type {Array<BookListItem>}
     * @memberof BookFilterResponseDto
     */
    'list'?: Array<BookListItem>;
}
/**
 * 
 * @export
 * @interface BookItem
 */
export interface BookItem {
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'isbn': string;
    /**
     * 
     * @type {number}
     * @memberof BookItem
     */
    'publisherId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'publication_date': string;
    /**
     * 
     * @type {number}
     * @memberof BookItem
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof BookItem
     */
    'stock_quantity': number;
    /**
     * 
     * @type {number}
     * @memberof BookItem
     */
    'categoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'language': BookItemLanguageEnum;
    /**
     * 
     * @type {number}
     * @memberof BookItem
     */
    'page_count': number;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'format'?: string;
    /**
     * 
     * @type {Dimensions}
     * @memberof BookItem
     */
    'dimensions'?: Dimensions;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'weight'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'cover_image_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookItem
     */
    'rating': number;
    /**
     * 
     * @type {number}
     * @memberof BookItem
     */
    'number_of_reviews': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookItem
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'edition'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookItem
     */
    'series'?: string;
}

export const BookItemLanguageEnum = {
    English: 'English',
    Spanish: 'Spanish',
    French: 'French',
    German: 'German',
    Chinese: 'Chinese',
    Japanese: 'Japanese',
    Korean: 'Korean',
    Italian: 'Italian',
    Russian: 'Russian',
    Hindi: 'Hindi',
    Arabic: 'Arabic'
} as const;

export type BookItemLanguageEnum = typeof BookItemLanguageEnum[keyof typeof BookItemLanguageEnum];

/**
 * 
 * @export
 * @interface BookListItem
 */
export interface BookListItem {
    /**
     * 
     * @type {number}
     * @memberof BookListItem
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BookListItem
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof BookListItem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BookListItem
     */
    'isbn': string;
    /**
     * 
     * @type {object}
     * @memberof BookListItem
     */
    'publisherId': object;
    /**
     * 
     * @type {object}
     * @memberof BookListItem
     */
    'categoryId': object;
    /**
     * 
     * @type {number}
     * @memberof BookListItem
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof BookListItem
     */
    'cover_image_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookListItem
     */
    'rating': number;
    /**
     * 
     * @type {number}
     * @memberof BookListItem
     */
    'number_of_reviews': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookListItem
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * 
     * @type {number}
     * @memberof CategoryDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CategoryDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateBookDto
 */
export interface CreateBookDto {
    /**
     * 
     * @type {Array<BookItem>}
     * @memberof CreateBookDto
     */
    'list': Array<BookItem>;
}
/**
 * 
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'userId': string;
    /**
     * 
     * @type {OrderStatus}
     * @memberof CreateOrderDto
     */
    'status': OrderStatus;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof CreateOrderDto
     */
    'payment_method': PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'shipping_address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'phone_number': string;
    /**
     * 
     * @type {Array<OrderDetail>}
     * @memberof CreateOrderDto
     */
    'detail': Array<OrderDetail>;
}


/**
 * 
 * @export
 * @interface CreatePublisherDto
 */
export interface CreatePublisherDto {
    /**
     * Tên nhà xuất bản
     * @type {string}
     * @memberof CreatePublisherDto
     */
    'name': string;
    /**
     * Website của nhà xuất bản
     * @type {string}
     * @memberof CreatePublisherDto
     */
    'website'?: string;
    /**
     * Email liên hệ
     * @type {string}
     * @memberof CreatePublisherDto
     */
    'contact_email'?: string;
    /**
     * Số điện thoại liên hệ
     * @type {string}
     * @memberof CreatePublisherDto
     */
    'phone_number'?: string;
    /**
     * Địa chỉ nhà xuất bản
     * @type {string}
     * @memberof CreatePublisherDto
     */
    'address'?: string;
    /**
     * Quốc gia
     * @type {string}
     * @memberof CreatePublisherDto
     */
    'country'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password_set_token': string;
}
/**
 * 
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * 
     * @type {string}
     * @memberof Dimensions
     */
    'height': string;
    /**
     * 
     * @type {string}
     * @memberof Dimensions
     */
    'width': string;
    /**
     * 
     * @type {string}
     * @memberof Dimensions
     */
    'thickness': string;
}
/**
 * 
 * @export
 * @interface GetBookResponseDto
 */
export interface GetBookResponseDto {
    /**
     * 
     * @type {number}
     * @memberof GetBookResponseDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'isbn': string;
    /**
     * 
     * @type {PublisherDto}
     * @memberof GetBookResponseDto
     */
    'publisher': PublisherDto | null;
    /**
     * 
     * @type {CategoryDto}
     * @memberof GetBookResponseDto
     */
    'category': CategoryDto | null;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'language': string;
    /**
     * 
     * @type {number}
     * @memberof GetBookResponseDto
     */
    'page_count': number;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof GetBookResponseDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'cover_image_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetBookResponseDto
     */
    'rating': number;
    /**
     * 
     * @type {number}
     * @memberof GetBookResponseDto
     */
    'stock_quantity': number;
    /**
     * 
     * @type {number}
     * @memberof GetBookResponseDto
     */
    'number_of_reviews': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetBookResponseDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {Dimensions}
     * @memberof GetBookResponseDto
     */
    'dimensions'?: Dimensions;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'weight': string;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'edition': string;
    /**
     * 
     * @type {string}
     * @memberof GetBookResponseDto
     */
    'series': string;
}
/**
 * 
 * @export
 * @interface GetOrderResponseDto
 */
export interface GetOrderResponseDto {
    /**
     * 
     * @type {number}
     * @memberof GetOrderResponseDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GetOrderResponseDto
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof GetOrderResponseDto
     */
    'total_price': number;
    /**
     * 
     * @type {OrderStatus}
     * @memberof GetOrderResponseDto
     */
    'status': OrderStatus;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof GetOrderResponseDto
     */
    'payment_method': PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof GetOrderResponseDto
     */
    'shipping_address': string;
    /**
     * 
     * @type {string}
     * @memberof GetOrderResponseDto
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof GetOrderResponseDto
     */
    'note': string;
    /**
     * 
     * @type {Array<OrderDetailResponseDto>}
     * @memberof GetOrderResponseDto
     */
    'detail': Array<OrderDetailResponseDto>;
}


/**
 * 
 * @export
 * @interface ListingPublisherResponseDto
 */
export interface ListingPublisherResponseDto {
    /**
     * 
     * @type {number}
     * @memberof ListingPublisherResponseDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ListingPublisherResponseDto
     */
    'per_page': number;
    /**
     * 
     * @type {number}
     * @memberof ListingPublisherResponseDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof ListingPublisherResponseDto
     */
    'total_pages': number;
    /**
     * 
     * @type {Array<PublisherItemDto>}
     * @memberof ListingPublisherResponseDto
     */
    'data': Array<PublisherItemDto>;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'refreshToken': string;
    /**
     * 
     * @type {UserBasicInfor}
     * @memberof LoginResponseDto
     */
    'user': UserBasicInfor;
}
/**
 * 
 * @export
 * @interface OrderDetail
 */
export interface OrderDetail {
    /**
     * 
     * @type {number}
     * @memberof OrderDetail
     */
    'bookId': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetail
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetail
     */
    'sub_total': number;
}
/**
 * 
 * @export
 * @interface OrderDetailResponseDto
 */
export interface OrderDetailResponseDto {
    /**
     * 
     * @type {number}
     * @memberof OrderDetailResponseDto
     */
    'orderId': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailResponseDto
     */
    'bookId': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailResponseDto
     */
    'book_title': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailResponseDto
     */
    'book_price': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailResponseDto
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailResponseDto
     */
    'sub_total': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OrderStatus = {
    Pending: 'PENDING',
    Paid: 'PAID',
    Shipped: 'SHIPPED',
    Delivered: 'DELIVERED',
    Cancelled: 'CANCELLED'
} as const;

export type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const PaymentMethod = {
    CreditCard: 'CREDIT_CARD',
    Paypal: 'PAYPAL',
    CashOnDelivery: 'CASH_ON_DELIVERY',
    BankTransfer: 'BANK_TRANSFER'
} as const;

export type PaymentMethod = typeof PaymentMethod[keyof typeof PaymentMethod];


/**
 * 
 * @export
 * @interface PublisherDto
 */
export interface PublisherDto {
    /**
     * 
     * @type {number}
     * @memberof PublisherDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PublisherDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PublisherItemDto
 */
export interface PublisherItemDto {
    /**
     * 
     * @type {number}
     * @memberof PublisherItemDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PublisherItemDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PublisherItemDto
     */
    'website': string | null;
    /**
     * 
     * @type {string}
     * @memberof PublisherItemDto
     */
    'contact_email': string | null;
    /**
     * 
     * @type {string}
     * @memberof PublisherItemDto
     */
    'phone_number': string | null;
    /**
     * 
     * @type {string}
     * @memberof PublisherItemDto
     */
    'address': string | null;
    /**
     * 
     * @type {string}
     * @memberof PublisherItemDto
     */
    'country': string | null;
}
/**
 * 
 * @export
 * @interface SignUpFirstStepDto
 */
export interface SignUpFirstStepDto {
    /**
     * 
     * @type {string}
     * @memberof SignUpFirstStepDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpFirstStepDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface SignUpFirstStepResponseDto
 */
export interface SignUpFirstStepResponseDto {
    /**
     * 
     * @type {string}
     * @memberof SignUpFirstStepResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpFirstStepResponseDto
     */
    'password_set_token': string;
}
/**
 * 
 * @export
 * @interface SignUpSecondStepDto
 */
export interface SignUpSecondStepDto {
    /**
     * 
     * @type {string}
     * @memberof SignUpSecondStepDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpSecondStepDto
     */
    'password_set_token': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpSecondStepDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpSecondStepDto
     */
    'avatar_url': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpSecondStepDto
     */
    'phone_number': string;
    /**
     * 
     * @type {UserRole}
     * @memberof SignUpSecondStepDto
     */
    'role': UserRole;
}


/**
 * 
 * @export
 * @interface UpdateBookDto
 */
export interface UpdateBookDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'isbn'?: string;
    /**
     * ID của nhà xuất bản
     * @type {number}
     * @memberof UpdateBookDto
     */
    'publisherId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'publication_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookDto
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookDto
     */
    'stock_quantity'?: number;
    /**
     * ID của danh mục sách
     * @type {number}
     * @memberof UpdateBookDto
     */
    'categoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'language'?: UpdateBookDtoLanguageEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'status'?: UpdateBookDtoStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookDto
     */
    'page_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'format'?: string;
    /**
     * 
     * @type {UpdateDimensions}
     * @memberof UpdateBookDto
     */
    'dimensions'?: UpdateDimensions;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'weight'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'cover_image_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookDto
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookDto
     */
    'number_of_reviews'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateBookDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'edition'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDto
     */
    'series'?: string;
}

export const UpdateBookDtoLanguageEnum = {
    English: 'English',
    Spanish: 'Spanish',
    French: 'French',
    German: 'German',
    Chinese: 'Chinese',
    Japanese: 'Japanese',
    Korean: 'Korean',
    Italian: 'Italian',
    Russian: 'Russian',
    Hindi: 'Hindi',
    Arabic: 'Arabic'
} as const;

export type UpdateBookDtoLanguageEnum = typeof UpdateBookDtoLanguageEnum[keyof typeof UpdateBookDtoLanguageEnum];
export const UpdateBookDtoStatusEnum = {
    Available: 'AVAILABLE',
    OutOfStock: 'OUT_OF_STOCK',
    PreOrder: 'PRE_ORDER',
    SoldOut: 'SOLD_OUT',
    ComingSoon: 'COMING_SOON',
    Discontinued: 'DISCONTINUED'
} as const;

export type UpdateBookDtoStatusEnum = typeof UpdateBookDtoStatusEnum[keyof typeof UpdateBookDtoStatusEnum];

/**
 * 
 * @export
 * @interface UpdateDimensions
 */
export interface UpdateDimensions {
    /**
     * 
     * @type {string}
     * @memberof UpdateDimensions
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDimensions
     */
    'width'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDimensions
     */
    'thickness'?: string;
}
/**
 * 
 * @export
 * @interface UpdateNewUserDto
 */
export interface UpdateNewUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateNewUserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateNewUserDto
     */
    'password_set_token': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateNewUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateNewUserDto
     */
    'avatar_url': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateNewUserDto
     */
    'phone_number': string;
    /**
     * 
     * @type {UserRole}
     * @memberof UpdateNewUserDto
     */
    'role': UserRole;
}


/**
 * 
 * @export
 * @interface UpdateOrderDto
 */
export interface UpdateOrderDto {
    /**
     * 
     * @type {OrderStatus}
     * @memberof UpdateOrderDto
     */
    'status': OrderStatus;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof UpdateOrderDto
     */
    'payment_method': PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'shipping_address': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'phone_number': string;
}


/**
 * 
 * @export
 * @interface UserBasicInfor
 */
export interface UserBasicInfor {
    /**
     * 
     * @type {string}
     * @memberof UserBasicInfor
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserBasicInfor
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserBasicInfor
     */
    'role': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const UserRole = {
    Seller: 'SELLER',
    User: 'USER',
    Admin: 'ADMIN'
} as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];


/**
 * 
 * @export
 * @interface VerifyTokenResponseDto
 */
export interface VerifyTokenResponseDto {
    /**
     * 
     * @type {UserBasicInfor}
     * @memberof VerifyTokenResponseDto
     */
    'user': UserBasicInfor;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginDto: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User sign up step 1
         * @param {SignUpFirstStepDto} signUpFirstStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpFirstStep: async (signUpFirstStepDto: SignUpFirstStepDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signUpFirstStepDto' is not null or undefined
            assertParamExists('authControllerSignUpFirstStep', 'signUpFirstStepDto', signUpFirstStepDto)
            const localVarPath = `/auth/sign-up/step-1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpFirstStepDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User sign up step 2
         * @param {SignUpSecondStepDto} signUpSecondStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpSecondStep: async (signUpSecondStepDto: SignUpSecondStepDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signUpSecondStepDto' is not null or undefined
            assertParamExists('authControllerSignUpSecondStep', 'signUpSecondStepDto', signUpSecondStepDto)
            const localVarPath = `/auth/sign-up/step-2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpSecondStepDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidatePwSetToken: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('authControllerValidatePwSetToken', 'token', token)
            const localVarPath = `/auth/validate-pw-set-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidateToken: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('authControllerValidateToken', 'token', token)
            const localVarPath = `/auth/validate-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User sign up step 1
         * @param {SignUpFirstStepDto} signUpFirstStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignUpFirstStep(signUpFirstStepDto: SignUpFirstStepDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUpFirstStepResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignUpFirstStep(signUpFirstStepDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSignUpFirstStep']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User sign up step 2
         * @param {SignUpSecondStepDto} signUpSecondStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignUpSecondStep(signUpSecondStepDto: SignUpSecondStepDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignUpSecondStep(signUpSecondStepDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSignUpSecondStep']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerValidatePwSetToken(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerValidatePwSetToken(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerValidatePwSetToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerValidateToken(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerValidateToken(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerValidateToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User sign up step 1
         * @param {SignUpFirstStepDto} signUpFirstStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpFirstStep(signUpFirstStepDto: SignUpFirstStepDto, options?: RawAxiosRequestConfig): AxiosPromise<SignUpFirstStepResponseDto> {
            return localVarFp.authControllerSignUpFirstStep(signUpFirstStepDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User sign up step 2
         * @param {SignUpSecondStepDto} signUpSecondStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpSecondStep(signUpSecondStepDto: SignUpSecondStepDto, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.authControllerSignUpSecondStep(signUpSecondStepDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidatePwSetToken(token: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerValidatePwSetToken(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidateToken(token: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerValidateToken(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary User login
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User sign up step 1
     * @param {SignUpFirstStepDto} signUpFirstStepDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignUpFirstStep(signUpFirstStepDto: SignUpFirstStepDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignUpFirstStep(signUpFirstStepDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User sign up step 2
     * @param {SignUpSecondStepDto} signUpSecondStepDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignUpSecondStep(signUpSecondStepDto: SignUpSecondStepDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignUpSecondStep(signUpSecondStepDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerValidatePwSetToken(token: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerValidatePwSetToken(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerValidateToken(token: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerValidateToken(token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookApi - axios parameter creator
 * @export
 */
export const BookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary upload book(s) to server
         * @param {CreateBookDto} createBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerCreate: async (createBookDto: CreateBookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBookDto' is not null or undefined
            assertParamExists('booksControllerCreate', 'createBookDto', createBookDto)
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a book by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksControllerFindOne', 'id', id)
            const localVarPath = `/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary filter books by conditions
         * @param {Array<string>} [author] 
         * @param {string} [title] 
         * @param {Array<number>} [publisherIds] 
         * @param {Array<number>} [categoryIds] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [priceFrom] 
         * @param {number} [priceTo] 
         * @param {Array<string>} [tags] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerListingBooks: async (author?: Array<string>, title?: string, publisherIds?: Array<number>, categoryIds?: Array<number>, ratingFrom?: number, ratingTo?: number, priceFrom?: number, priceTo?: number, tags?: Array<string>, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (author) {
                localVarQueryParameter['author'] = author;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (publisherIds) {
                localVarQueryParameter['publisher_ids'] = publisherIds;
            }

            if (categoryIds) {
                localVarQueryParameter['category_ids'] = categoryIds;
            }

            if (ratingFrom !== undefined) {
                localVarQueryParameter['rating_from'] = ratingFrom;
            }

            if (ratingTo !== undefined) {
                localVarQueryParameter['rating_to'] = ratingTo;
            }

            if (priceFrom !== undefined) {
                localVarQueryParameter['price_from'] = priceFrom;
            }

            if (priceTo !== undefined) {
                localVarQueryParameter['price_to'] = priceTo;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksControllerRemove', 'id', id)
            const localVarPath = `/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update a book by id
         * @param {string} id 
         * @param {UpdateBookDto} updateBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerUpdate: async (id: string, updateBookDto: UpdateBookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksControllerUpdate', 'id', id)
            // verify required parameter 'updateBookDto' is not null or undefined
            assertParamExists('booksControllerUpdate', 'updateBookDto', updateBookDto)
            const localVarPath = `/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookApi - functional programming interface
 * @export
 */
export const BookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary upload book(s) to server
         * @param {CreateBookDto} createBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksControllerCreate(createBookDto: CreateBookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksControllerCreate(createBookDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get a book by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary filter books by conditions
         * @param {Array<string>} [author] 
         * @param {string} [title] 
         * @param {Array<number>} [publisherIds] 
         * @param {Array<number>} [categoryIds] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [priceFrom] 
         * @param {number} [priceTo] 
         * @param {Array<string>} [tags] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksControllerListingBooks(author?: Array<string>, title?: string, publisherIds?: Array<number>, categoryIds?: Array<number>, ratingFrom?: number, ratingTo?: number, priceFrom?: number, priceTo?: number, tags?: Array<string>, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksControllerListingBooks(author, title, publisherIds, categoryIds, ratingFrom, ratingTo, priceFrom, priceTo, tags, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksControllerListingBooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary update a book by id
         * @param {string} id 
         * @param {UpdateBookDto} updateBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksControllerUpdate(id: string, updateBookDto: UpdateBookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksControllerUpdate(id, updateBookDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookApi - factory interface
 * @export
 */
export const BookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookApiFp(configuration)
    return {
        /**
         * 
         * @summary upload book(s) to server
         * @param {CreateBookDto} createBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerCreate(createBookDto: CreateBookDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksControllerCreate(createBookDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a book by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary filter books by conditions
         * @param {Array<string>} [author] 
         * @param {string} [title] 
         * @param {Array<number>} [publisherIds] 
         * @param {Array<number>} [categoryIds] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [priceFrom] 
         * @param {number} [priceTo] 
         * @param {Array<string>} [tags] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerListingBooks(author?: Array<string>, title?: string, publisherIds?: Array<number>, categoryIds?: Array<number>, ratingFrom?: number, ratingTo?: number, priceFrom?: number, priceTo?: number, tags?: Array<string>, page?: number, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksControllerListingBooks(author, title, publisherIds, categoryIds, ratingFrom, ratingTo, priceFrom, priceTo, tags, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update a book by id
         * @param {string} id 
         * @param {UpdateBookDto} updateBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksControllerUpdate(id: string, updateBookDto: UpdateBookDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksControllerUpdate(id, updateBookDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookApi - object-oriented interface
 * @export
 * @class BookApi
 * @extends {BaseAPI}
 */
export class BookApi extends BaseAPI {
    /**
     * 
     * @summary upload book(s) to server
     * @param {CreateBookDto} createBookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksControllerCreate(createBookDto: CreateBookDto, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksControllerCreate(createBookDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a book by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary filter books by conditions
     * @param {Array<string>} [author] 
     * @param {string} [title] 
     * @param {Array<number>} [publisherIds] 
     * @param {Array<number>} [categoryIds] 
     * @param {number} [ratingFrom] 
     * @param {number} [ratingTo] 
     * @param {number} [priceFrom] 
     * @param {number} [priceTo] 
     * @param {Array<string>} [tags] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksControllerListingBooks(author?: Array<string>, title?: string, publisherIds?: Array<number>, categoryIds?: Array<number>, ratingFrom?: number, ratingTo?: number, priceFrom?: number, priceTo?: number, tags?: Array<string>, page?: number, perPage?: number, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksControllerListingBooks(author, title, publisherIds, categoryIds, ratingFrom, ratingTo, priceFrom, priceTo, tags, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update a book by id
     * @param {string} id 
     * @param {UpdateBookDto} updateBookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksControllerUpdate(id: string, updateBookDto: UpdateBookDto, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksControllerUpdate(id, updateBookDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesControllerBulkCreate: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('categoriesControllerBulkCreate', 'body', body)
            const localVarPath = `/categories/bulk-create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesControllerBulkCreate(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesControllerBulkCreate(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesControllerBulkCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesControllerBulkCreate(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.categoriesControllerBulkCreate(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesControllerBulkCreate(body: object, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesControllerBulkCreate(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new order
         * @param {CreateOrderDto} createOrderDto Order data including user info and order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCreateOrder: async (createOrderDto: CreateOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderDto' is not null or undefined
            assertParamExists('ordersControllerCreateOrder', 'createOrderDto', createOrderDto)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order details by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerFindOne', 'id', id)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerRemove', 'id', id)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update order basic information
         * @param {string} id 
         * @param {UpdateOrderDto} updateOrderDto Order basic data such as status, address, ..etc..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerUpdate: async (id: string, updateOrderDto: UpdateOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerUpdate', 'id', id)
            // verify required parameter 'updateOrderDto' is not null or undefined
            assertParamExists('ordersControllerUpdate', 'updateOrderDto', updateOrderDto)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new order
         * @param {CreateOrderDto} createOrderDto Order data including user info and order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerCreateOrder(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerCreateOrder(createOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerCreateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get order details by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update order basic information
         * @param {string} id 
         * @param {UpdateOrderDto} updateOrderDto Order basic data such as status, address, ..etc..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerUpdate(id: string, updateOrderDto: UpdateOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerUpdate(id, updateOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new order
         * @param {CreateOrderDto} createOrderDto Order data including user info and order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCreateOrder(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.ordersControllerCreateOrder(createOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ordersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order details by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetOrderResponseDto> {
            return localVarFp.ordersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ordersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update order basic information
         * @param {string} id 
         * @param {UpdateOrderDto} updateOrderDto Order basic data such as status, address, ..etc..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerUpdate(id: string, updateOrderDto: UpdateOrderDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ordersControllerUpdate(id, updateOrderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary Create a new order
     * @param {CreateOrderDto} createOrderDto Order data including user info and order details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerCreateOrder(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerCreateOrder(createOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerFindAll(options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order details by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update order basic information
     * @param {string} id 
     * @param {UpdateOrderDto} updateOrderDto Order basic data such as status, address, ..etc..
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerUpdate(id: string, updateOrderDto: UpdateOrderDto, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerUpdate(id, updateOrderDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PublishersApi - axios parameter creator
 * @export
 */
export const PublishersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a publisher
         * @param {CreatePublisherDto} createPublisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersControllerCreate: async (createPublisherDto: CreatePublisherDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPublisherDto' is not null or undefined
            assertParamExists('publishersControllerCreate', 'createPublisherDto', createPublisherDto)
            const localVarPath = `/publishers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPublisherDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('publishersControllerFindOne', 'id', id)
            const localVarPath = `/publishers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of publishers
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersControllerListingPublishers: async (page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publishers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('publishersControllerRemove', 'id', id)
            const localVarPath = `/publishers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublishersApi - functional programming interface
 * @export
 */
export const PublishersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublishersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a publisher
         * @param {CreatePublisherDto} createPublisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishersControllerCreate(createPublisherDto: CreatePublisherDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishersControllerCreate(createPublisherDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublishersApi.publishersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishersControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublishersApi.publishersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a list of publishers
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishersControllerListingPublishers(page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingPublisherResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishersControllerListingPublishers(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublishersApi.publishersControllerListingPublishers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublishersApi.publishersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublishersApi - factory interface
 * @export
 */
export const PublishersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublishersApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a publisher
         * @param {CreatePublisherDto} createPublisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersControllerCreate(createPublisherDto: CreatePublisherDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishersControllerCreate(createPublisherDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of publishers
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersControllerListingPublishers(page?: number, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<ListingPublisherResponseDto> {
            return localVarFp.publishersControllerListingPublishers(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublishersApi - object-oriented interface
 * @export
 * @class PublishersApi
 * @extends {BaseAPI}
 */
export class PublishersApi extends BaseAPI {
    /**
     * 
     * @summary Add a publisher
     * @param {CreatePublisherDto} createPublisherDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishersApi
     */
    public publishersControllerCreate(createPublisherDto: CreatePublisherDto, options?: RawAxiosRequestConfig) {
        return PublishersApiFp(this.configuration).publishersControllerCreate(createPublisherDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishersApi
     */
    public publishersControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return PublishersApiFp(this.configuration).publishersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of publishers
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishersApi
     */
    public publishersControllerListingPublishers(page?: number, perPage?: number, options?: RawAxiosRequestConfig) {
        return PublishersApiFp(this.configuration).publishersControllerListingPublishers(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishersApi
     */
    public publishersControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return PublishersApiFp(this.configuration).publishersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRemove', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerFindAll(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
}



